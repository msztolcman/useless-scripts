#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function, unicode_literals

import argparse
import re
import sys

__version__   = 'version 0.1'
__author__    = 'Marcin Sztolcman <marcin@urzenia.net>'
__copyright__ = '(r) 2015'
__program__   = 'difftime - calculate diff between two times'
__date__      = '2015-05-22'
__license__   = 'GPL v.2'

__desc__      = '''%(desc)s
%(author)s %(copyright)s
license: %(license)s
version %(version)s (%(date)s)''' % {
  'desc': __program__,
  'author': __author__,
  'copyright': __copyright__,
  'license': __license__,
  'version': __version__,
  'date': __date__
}


def seconds(t):
    t = t.strip()
    match = re.search(r'''
        \b
        (?:
            (?P<hour>\d\d?)
            (?P<delim>[.: -])
            (?P<minute>\d\d?)
            (?P=delim)
            (?P<second>\d\d?)
        )?
        \b
    ''', t, re.VERBOSE)

    if not match:
        print('Cannot parse time: %s' % t, file=sys.stderr)
        sys.exit(1)

    match = match.groupdict()
    ret = int(match['hour']) * 3600 + int(match['minute']) * 60 + int(match['second'])
    return ret


def parse_args():
    p = argparse.ArgumentParser()
    p.add_argument('--format', '-f', type=str, default='seconds')
    p.add_argument('times', metavar='time', nargs=2, type=str)
    p.add_argument('--version', action='version', version='%%(prog)s %s' % __version__)

    args = p.parse_args()

    formats = {
        's': 'seconds',
        'sec': 'seconds',
        'second': 'seconds',
        'seconds': 'seconds',
        'm': 'minutes',
        'min': 'minutes',
        'minute': 'minutes',
        'minutes': 'minutes',
        'h': 'hours',
        'hour': 'hours',
        'hours': 'hours',
    }
    try:
        args.format = formats[args.format]
    except KeyError:
        p.error("Invalid format, should be one of: hours, minutes, seconds")

    return args


def _sec_to_seconds(sec):
    return sec


def _sec_to_minutes(sec):
    min, sec = divmod(sec, 60)
    return '%02d:%02d' % (min, sec)


def _sec_to_hours(sec):
    hours, min = divmod(sec, 3600)
    min, sec = divmod(min, 60)
    return '%02d:%02d:%02d' % (hours, min, sec)

_multipliers = {
    'seconds': _sec_to_seconds,
    'minutes': _sec_to_minutes,
    'hours': _sec_to_hours,
}
def main():
    args = parse_args()

    sec1, sec2 = seconds(args.times[0]), seconds(args.times[1])
    diff = sec2 - sec1
    result = _multipliers[args.format](diff)
    print(result)


if __name__ == '__main__':
    main()


